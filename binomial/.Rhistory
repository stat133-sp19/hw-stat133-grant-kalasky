one_char_tweets <- character()
for (i in 1:length(data[[4]])) {
if (char_vector[i] == 1) {
one_char_idx <- c(one_char_idx, i)
one_char_tweets <- c(one_char_tweets, str_sub(data[[4]][i]))
}
}
one_char_tweets
one_char_idx
# What is the tweet with the most characters (i.e. max length)?
max_length <- max(char_vector)
max_idx <- which.max(char_vector)
max_tweet <- str_sub(data[[4]][max_idx])
# number of characters
max_length
# display its content
max_tweet
# what is its location
max_idx
valid_usernames <- character()
invalid_usernames <- character()
invalid_pattern <- '\\W[^-_]$'
for (i in 1:length(data[[3]])) {
curr_username <- data[[3]][i]
if (str_length(curr_username) > 15 | str_detect(curr_username, invalid_pattern)) {
invalid_usernames <- c(invalid_usernames, curr_username)
invalid_idx <- c(invalid_idx, i)
} else {
valid_usernames <- c(valid_usernames, curr_username)
}
}
# We see that all usernames are valid, since our invalid_usernames vector is empty
invalid_usernames
# shortest username length
shortest_length <- 16
for (i in 1:length(data[[3]])) {
curr_username <- data[[3]][i]
if (str_length(curr_username) < shortest_length) {
shortest_length <- str_length(curr_username)
}
}
shortest_length
# find shortest usernames
shortest_usernames <- character()
for (i in 1:length(data[[3]])) {
curr_username <- data[[3]][i]
if (str_length(curr_username) == shortest_length) {
shortest_usernames <- c(shortest_usernames, curr_username)
}
}
shortest_usernames
tweets <- c(data[[4]][1:40000])
# How many tweets contain at least one caret symbol "^"
sum(str_count(tweets, "\\^") > 0)
# How many tweets contain three or more consecutive dollar symbols "$"
sum(str_count(tweets, "\\${3}") > 0)
# How many tweets do NOT contain the characters "a" or "A"
sum(str_count(tweets, "[aA]") == 0)
# Display the first 10 elements of the tweets that do NOT contain the characters "a" or "A"
non_a_tweets <- character()
count <- 0
for (i in 1:length(tweets)) {
if (count == 10) {
break
}
if (str_count(tweets[i], "[aA]") == 0) {
non_a_tweets <- c(non_a_tweets, tweets[i])
count <- count + 1
}
}
non_a_tweets
# Number of exclamation symbols "!"
exclamation_counts <- numeric()
for (i in 1:length(tweets)) {
exclamation_counts <- c(exclamation_counts, str_count(tweets[i], "!"))
}
summary(exclamation_counts)
# Whatâ€™s the tweet (content) with the largest number of exclamation symbols !?
tweets[which.max(exclamation_counts)]
library(ggplot2)
library(forcats)
library(dplyr)
# What are the different types of sentiments (i.e. categories)?
unique(data[2])
# Compute the frequencies (i.e. counts) of each sentiment
# sentiment_freq <- as.data.frame(table(unlist(data[2])))
# sentiment_freq
sentiment_freq <- data.frame(table(data[2]))
sentiment_freq
# Graph the relative frequencies (i.e. proportions) with a horizontal barplot
sentiment_df <- data.frame(data[2])
ggplot(sentiment_df, aes(x=fct_infreq(sentiment))) +
geom_bar() +
coord_flip()
# Compute a table with the average length of characters per sentiment
df <- data.frame(data)
sentiment_vector <- character()
avg_len_vector <- numeric()
for (i in 1:length(sentiments$sentiment)) {
curr_sentiment <- sentiments$sentiment[i]
sentiment_vector <- c(sentiment_vector, curr_sentiment)
filtered_df <- filter(df, df$sentiment == curr_sentiment)
avg_len <- mean(str_length(filtered_df[[4]]))
avg_len_vector <- c(avg_len_vector, avg_len)
}
avg_len_df <- data.frame(sentiment = sentiment_vector,
avg_length = avg_len_vector)
avg_len_df
library(ggplot2)
library(forcats)
library(dplyr)
# What are the different types of sentiments (i.e. categories)?
unique(data[2])
# Compute the frequencies (i.e. counts) of each sentiment
sentiment_freq <- data.frame(table(data[2]))
sentiment_freq
# Graph the relative frequencies (i.e. proportions) with a horizontal barplot
sentiment_df <- data.frame(data[2])
ggplot(sentiment_df, aes(x=fct_infreq(sentiment))) +
geom_bar() +
coord_flip()
# Compute a table with the average length of characters per sentiment
df <- data.frame(data)
sentiment_vector <- character()
avg_len_vector <- numeric()
for (i in 1:length(sentiments$sentiment)) {
curr_sentiment <- sentiments$sentiment[i]
sentiment_vector <- c(sentiment_vector, curr_sentiment)
filtered_df <- filter(df, df$sentiment == curr_sentiment)
avg_len <- mean(str_length(filtered_df[[4]]))
avg_len_vector <- c(avg_len_vector, avg_len)
}
avg_len_df <- data.frame(sentiment = sentiment_vector,
avg_length = avg_len_vector)
avg_len_df
library(ggplot2)
library(forcats)
library(dplyr)
# What are the different types of sentiments (i.e. categories)?
sentiments <- unique(data[2])
# Compute the frequencies (i.e. counts) of each sentiment
sentiment_freq <- data.frame(table(data[2]))
sentiment_freq
# Graph the relative frequencies (i.e. proportions) with a horizontal barplot
sentiment_df <- data.frame(data[2])
ggplot(sentiment_df, aes(x=fct_infreq(sentiment))) +
geom_bar() +
coord_flip()
# Compute a table with the average length of characters per sentiment
df <- data.frame(data)
sentiment_vector <- character()
avg_len_vector <- numeric()
for (i in 1:length(sentiments$sentiment)) {
curr_sentiment <- sentiments$sentiment[i]
sentiment_vector <- c(sentiment_vector, curr_sentiment)
filtered_df <- filter(df, df$sentiment == curr_sentiment)
avg_len <- mean(str_length(filtered_df[[4]]))
avg_len_vector <- c(avg_len_vector, avg_len)
}
avg_len_df <- data.frame(sentiment = sentiment_vector,
avg_length = avg_len_vector)
avg_len_df
install.packages("testthat")
test <- c(4, 5, 6)
num <- 2
num^test
bin_choose <- function(n, k) {
if (any(k > n)) {
stop("'k' cannot be greater than 'n'")
}
if (length(k) == 1) {
numerator <- factorial(n)
denom <- factorial(k) * factorial(n - k)
return(numerator / denom)
} else {
numerator <- rep(factorial(n), length(k))
denom1 <- factorial(k)
denom2 <- factorial(rep(n, length(k)) - k)
denom <- denom1 * denom2
return(numerator / denom)
}
}
bin_choose(5, 2)
bin_choose(5, 1:3)
check_prob <- function(prob) {
if (prob < 0 | prob > 1) {
stop("'prob' values must be between 0 and 1")
}
TRUE
}
# private function to test if trials is valid value
check_trials <- function(trials) {
if(trials < 0) {
stop("invalid 'trials' value")
}
TRUE
}
# private function to test if success is a valid value
check_success <- function(success, trials) {
for (i in 1:length(success)) {
if (success[i] < 0 | success[i] > trials) {
stop("invalid 'success' value")
}
# if (any(is.na(success))) {
#   stop("'success' cannot contain missing values")
# }
}
TRUE
}
bin_probability <- function(success, trials, prob) {
if (!check_success(success, trials)) {
stop("\ninvalid 'success' values")
}
if (!check_trials(trials)) {
stop("\ninvalid 'trial' value")
}
if (!check_prob(prob)) {
stop("\ninvalid 'prob' value")
}
return(bin_choose(trials, success) * prob^(success) * (1 - prob)^(trials - success))
}
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability(success = 55, trials = 100, prob = 0.45)
bin_distribution <- function(trials, prob) {
temp_success <- seq(0, trials, 1)
bin_probs <- bin_probability(temp_success, trials, prob)
dist_df <- data.frame(
success=temp_success,
probability=bin_probs
)
class(dist_df) <- c("bindis", "data.frame")
return(dist_df)
}
my_df <- bin_distribution(trials = 5, prob = 0.5)
plot.bindis <- function(dist_df) {
return(barplot(dist_df$probability,
xlab = "successes",
ylab = "proability",
names.arg = dist_df$success)
)
}
plot(my_df)
bin_cumulative <- function(trials, prob) {
temp_success <- seq(0, trials, 1)
bin_probs <- bin_probability(temp_success, trials, prob)
bin_df <- data.frame(
success=temp_success,
probability=bin_probs,
cumulative=cumsum(bin_probs)
)
class(bin_df) <- c("bincum", "data.frame")
return(bin_df)
}
bin_cumulative(trials = 5, prob = 0.5)
plot.bincum <- function(bin_df) {
return(plot(x = bin_df$success,
y = bin_df$cumulative,
xlab = "successes",
ylab = "proability",
type = "b")
)
}
bin_df <- bin_cumulative(trials = 5, prob = 0.5)
plot(bin_df)
# private function to calculate binomial mean
aux_mean <- function(trials, prob) {
return(trials * prob)
}
# private function to calculate binomial variance
aux_variance <- function(trials, prob) {
return((trials * prob) * (1 - prob))
}
# private function to calculate binomial mode
aux_mode <- function(trials, prob) {
return(floor((trials * prob) + prob))
}
# private function to calculate binomial skewness
aux_skewness <- function(trials, prob) {
numerator <- 1 - (2 * prob)
denom <- sqrt((trials * prob) * (1 - prob))
return(numerator / denom)
}
# private function to calculate binomial kurtosis
aux_kurtosis <- function(trials, prob) {
numerator <- 1 - ((6 * prob) * (1 - prob))
denom <- (trials * prob) * (1 - prob)
return(numerator / denom)
}
bin_variable <- function(trials, prob) {
if (!check_trials(trials)) {
stop("\ninvalid 'trial' value")
}
if (!check_prob(prob)) {
stop("\ninvalid 'prob' value")
}
bin_var <- list(
trials=trials,
prob=prob
)
class(bin_var) <- "binvar"
return(bin_var)
}
#' @export
print.binvar <- function(bin_var) {
print("Binomial Variable")
print("", quote = FALSE)
print('Parameters', quote=FALSE)
print(paste0("- number of trials: ", bin_var$trials), quote = FALSE)
print(paste0("- prob of success: ", bin_var$prob), quote = FALSE)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
summary.binvar <- function(bin_var) {
print("Summary Binomial")
print("", quote=FALSE)
print("Parameters", quote = FALSE)
print(paste0("- number of trials: ", bin_var$trials), quote = FALSE)
print(paste0("- prob of success: ", bin_var$prob), quote = FALSE)
print("", quote=FALSE)
print("Measures", quote = FALSE)
print(paste0("- mean: ", aux_mean(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- variance: ", aux_variance(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- mode: ", aux_mode(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- skewness: ", aux_skewness(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- kurtosis: ", aux_kurtosis(bin_var$trials, bin_var$prob)), quote = FALSE)
}
summary(bin1)
bin_kurtosis <- function(trials, prob) {
return(aux_kurtosis(trials, prob))
}
bin_kurtosis(10, 0.3)
test <- c(4, 5, 6)
num <- 2
num^test
bin_choose <- function(n, k) {
if (any(k > n)) {
stop("'k' cannot be greater than 'n'")
}
if (length(k) == 1) {
numerator <- factorial(n)
denom <- factorial(k) * factorial(n - k)
return(numerator / denom)
} else {
numerator <- rep(factorial(n), length(k))
denom1 <- factorial(k)
denom2 <- factorial(rep(n, length(k)) - k)
denom <- denom1 * denom2
return(numerator / denom)
}
}
bin_choose(5, 2)
bin_choose(5, 1:3)
check_prob <- function(prob) {
if (prob < 0 | prob > 1) {
stop("'prob' values must be between 0 and 1")
}
TRUE
}
# private function to test if trials is valid value
check_trials <- function(trials) {
if(trials < 0) {
stop("invalid 'trials' value")
}
TRUE
}
# private function to test if success is a valid value
check_success <- function(success, trials) {
for (i in 1:length(success)) {
check_trials(trials)
if (success[i] < 0 | success[i] > trials) {
stop("invalid 'success' value")
}
}
TRUE
}
bin_probability <- function(success, trials, prob) {
if (!check_success(success, trials)) {
stop("\ninvalid 'success' values")
}
if (!check_trials(trials)) {
stop("\ninvalid 'trial' value")
}
if (!check_prob(prob)) {
stop("\ninvalid 'prob' value")
}
return(bin_choose(trials, success) * prob^(success) * (1 - prob)^(trials - success))
}
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability(success = 55, trials = 100, prob = 0.45)
bin_distribution <- function(trials, prob) {
temp_success <- seq(0, trials, 1)
bin_probs <- bin_probability(temp_success, trials, prob)
dist_df <- data.frame(
success=temp_success,
probability=bin_probs
)
class(dist_df) <- c("bindis", "data.frame")
return(dist_df)
}
my_df <- bin_distribution(trials = 5, prob = 0.5)
plot.bindis <- function(dist_df) {
return(barplot(dist_df$probability,
xlab = "successes",
ylab = "proability",
names.arg = dist_df$success)
)
}
plot(my_df)
bin_cumulative <- function(trials, prob) {
temp_success <- seq(0, trials, 1)
bin_probs <- bin_probability(temp_success, trials, prob)
bin_df <- data.frame(
success=temp_success,
probability=bin_probs,
cumulative=cumsum(bin_probs)
)
class(bin_df) <- c("bincum", "data.frame")
return(bin_df)
}
bin_cumulative(trials = 5, prob = 0.5)
plot.bincum <- function(bin_df) {
return(plot(x = bin_df$success,
y = bin_df$cumulative,
xlab = "successes",
ylab = "proability",
type = "b")
)
}
bin_df <- bin_cumulative(trials = 5, prob = 0.5)
plot(bin_df)
# private function to calculate binomial mean
aux_mean <- function(trials, prob) {
return(trials * prob)
}
# private function to calculate binomial variance
aux_variance <- function(trials, prob) {
return((trials * prob) * (1 - prob))
}
# private function to calculate binomial mode
aux_mode <- function(trials, prob) {
return(floor((trials * prob) + prob))
}
# private function to calculate binomial skewness
aux_skewness <- function(trials, prob) {
numerator <- 1 - (2 * prob)
denom <- sqrt((trials * prob) * (1 - prob))
return(numerator / denom)
}
# private function to calculate binomial kurtosis
aux_kurtosis <- function(trials, prob) {
numerator <- 1 - ((6 * prob) * (1 - prob))
denom <- (trials * prob) * (1 - prob)
return(numerator / denom)
}
bin_variable <- function(trials, prob) {
if (!check_trials(trials)) {
stop("\ninvalid 'trial' value")
}
if (!check_prob(prob)) {
stop("\ninvalid 'prob' value")
}
bin_var <- list(
trials=trials,
prob=prob
)
class(bin_var) <- "binvar"
return(bin_var)
}
#' @export
print.binvar <- function(bin_var) {
print("Binomial Variable")
print("", quote = FALSE)
print('Parameters', quote=FALSE)
print(paste0("- number of trials: ", bin_var$trials), quote = FALSE)
print(paste0("- prob of success: ", bin_var$prob), quote = FALSE)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
summary.binvar <- function(bin_var) {
print("Summary Binomial")
print("", quote=FALSE)
print("Parameters", quote = FALSE)
print(paste0("- number of trials: ", bin_var$trials), quote = FALSE)
print(paste0("- prob of success: ", bin_var$prob), quote = FALSE)
print("", quote=FALSE)
print("Measures", quote = FALSE)
print(paste0("- mean: ", aux_mean(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- variance: ", aux_variance(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- mode: ", aux_mode(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- skewness: ", aux_skewness(bin_var$trials, bin_var$prob)), quote = FALSE)
print(paste0("- kurtosis: ", aux_kurtosis(bin_var$trials, bin_var$prob)), quote = FALSE)
}
summary(bin1)
bin_kurtosis <- function(trials, prob) {
return(aux_kurtosis(trials, prob))
}
bin_kurtosis(10, 0.3)
devtools::test()
devtools::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
install.packages('testthat')
install.packages("testthat")
usethis::use_testthat()
devtools::test()
test_check("binomial")
getwd()
setwd("/Users/grantkalasky/Berkeley/Stats133/binomial")
install.packages("testthat")
install.packages("testthat")
getwd()
devtools::test()
